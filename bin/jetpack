#!/usr/bin/ruby

#think: bash-like ruby

require "yaml"
require "erb"
require "fileutils"
require "etc"

local_lib_dir = File.join(File.dirname(__FILE__), "../lib")
$LOAD_PATH << local_lib_dir if File.directory?(local_lib_dir)

#Env vars like RUBYOPT get passed on to jruby.
#Cleanse the environment of these vars so that jruby is not affected.
ENV.delete_if{|k,v|k =~ /(^RUBY|^BUNDLE)/}

require "jetpack/settings"

include FileUtils

def halt(message)
  $stderr.puts message
  exit 1
end

def x!(cmd)
  puts cmd if ENV['VERBOSE']
  system(cmd) || halt("'#{cmd}' failed.")
end


halt("usage: jetpack <project_path>") unless ARGV.length==1 && File.directory?(ARGV[0])

@path_to_project = ARGV.shift
@created = []

@settings = Jetpack::Settings.load_from_project(@path_to_project)

puts @settings.inspect

unless @settings.jruby?
  halt(%{Your config/jetpack.yml must at least contain a pointer to the desired jruby-complete jar.
Ex:

jruby: http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby-complete-1.6.4.jar
jetty: http://dist.codehaus.org/jetty/jetty-hightide-7.4.5/jetty-hightide-7.4.5.v20110725.zip
  })
end

script_start_time = Time.now

@jruby_jar_file = "vendor/jruby.jar"
@jetpack_dir = File.expand_path(File.join(File.dirname(__FILE__), ".."))

@gem_home = "file:" + File.join(@settings.app_root, @jruby_jar_file) + "!/META-INF/jruby.home/lib/ruby/gems/1.8"
@gem_path = @gem_home + ":vendor/bundler_gem"

# Don't set min memory size when making the build artifact
@jar_build_options = @settings.java_options.gsub(/(\s*)-Xms\S+/,'\1')

@java_dash_jar = "PATH=$PATH:$(dirname $0) GEM_HOME=\"#{@gem_home}\" GEM_PATH=\"#{@gem_path}\" exec java #{@jar_build_options} -jar"
@jruby_opts = @settings.ruby_version.to_s == '1.9' ? '--1.9' : ''

def jruby!(cmd)
  x! "cd #{@path_to_project} && #{@java_dash_jar} #{@jruby_jar_file} #{@jruby_opts} #{cmd}"
end

def download(url, local_file)
  x! "curl --silent --show-error -o #{local_file} #{url}"
end

def unzip(file, directory, pattern="")
  x! "unzip -qq #{file} #{pattern} -d #{directory}"
end

def install_bundler_gem
  unless File.exists?("#{@path_to_project}/vendor/bundler_gem")
    jruby! " -S gem install #{@jetpack_dir}/gems/bundler-1.1.0.gem -i vendor/bundler_gem --no-rdoc --no-ri"
  end
end

def regenerate_gemfile_lock_if_platform_java_is_not_found
  gemfile_lock_lines = File.read(File.join(@path_to_project, "Gemfile.lock")).split("\n")
  platforms_start = gemfile_lock_lines.find_index{|line|line == "PLATFORMS"} + 1
  platforms_count = gemfile_lock_lines.slice(platforms_start..-1).find_index{|line|line == ""} - 1
  platforms = gemfile_lock_lines.slice(platforms_start..(platforms_start+platforms_count)).map{|platform_str|platform_str.strip}
  unless platforms.include?("java")
    $stderr.puts %{
      WARNING: Your Gemfile.lock does not contain PLATFORM java.
      Automtically regenerating and overwriting Gemfile.lock using jruby
       - because otherwise, jruby-specific gems would not be installed by bundler.
      To make this message go away, you must re-generate your Gemfile.lock using jruby.
    }
    jruby! " -e 'require \"rubygems\"; require \"bundler\"; Bundler.definition.lock(Bundler.default_lockfile)'"
  end
end

def bundle_install
  install_bundler_gem
  regenerate_gemfile_lock_if_platform_java_is_not_found
  #Do the equivalent of 'bundle' in code so we know exactly which bundler we're using.
  bundle_without = @settings.bundle_without.map{ |group| "\"#{group}\"" }.join(',')
  jruby! " -e 'require \"rubygems\"; require \"bundler\"; require \"bundler/cli\"; cli=Bundler::CLI.new; cli.options={:deployment=>true, :without=> [#{bundle_without}]}; cli.install'"
end

def install_jetty(vendor_dir)
  jetty_dir = File.join(vendor_dir, "jetty")
  Dir["#{vendor_dir}/jett*"].to_a.each{|f|rm_rf(f)}
  download @settings.jetty, File.join(vendor_dir, "jetty.zip")
  unzip File.join(vendor_dir, "jetty.zip"), vendor_dir
  rm File.join(vendor_dir, "jetty.zip")
  mv Dir["#{vendor_dir}/jetty*"].to_a.first, jetty_dir
  rm_rf "#{jetty_dir}/webapps"
  jetty_dir
end

def install_commons_validator(lib_dir)
  commons_validator_zip = File.join(lib_dir, "commons-validator.zip")
  download "http://mirrors.axint.net/apache//commons/validator/binaries/commons-validator-1.4.0-bin.zip", commons_validator_zip
  unzip commons_validator_zip, lib_dir
  mv File.join(lib_dir, "commons-validator-1.4.0", "commons-validator-1.4.0.jar"), lib_dir
  rm_rf(File.join(lib_dir, "commons-validator-1.4.0"))
  rm commons_validator_zip
  lib_dir
end

def install_jruby_rack_jar(vendor_dir)
  download @settings.jruby_rack, File.join(vendor_dir, "jruby-rack.jar")
end

def process_template_files(erb_files)
  erb_files.each do |erb_file|
    evaled_contents = ERB.new(File.read(erb_file)).result(binding)
    target_file = erb_file.sub(/\.erb$/, "")
    File.open(target_file, "w"){|f|f<<evaled_contents}
    File.new(target_file).chmod(File.stat(erb_file).mode)
    rm erb_file

    @created.delete(erb_file)
    @created << target_file
  end
end

def note_files_created(dir)
  before = Dir["#{dir}/**/{*,.*}"]
  yield
  after = Dir["#{dir}/**/{*,.*}"]
  after - before
end

def overlay_files(overlay_dir, target_dir)
  files_created = note_files_created(target_dir) do
    FileUtils.cp_r(Dir.glob("#{overlay_dir}/**/{*,.[^.]*}"), target_dir, :preserve => true)
  end

  process_template_files files_created.select{|f|f=~/\.erb$/}
end

bin_dir = File.join(@path_to_project, "bin")
mkdir_p bin_dir
overlay_files File.join(@jetpack_dir, "bin_files"), bin_dir

vendor_dir = File.join(@path_to_project, "vendor")
mkdir_p vendor_dir
download @settings.jruby, File.join(@path_to_project, @jruby_jar_file)

bundle_install if File.exists?(File.join(@path_to_project, "Gemfile.lock"))
if @settings.jetty?
  jetty_dir = install_jetty(vendor_dir)
  install_jruby_rack_jar vendor_dir #raise if jar not found

  overlay_files File.join(@jetpack_dir, "jetty_files"), File.join(@path_to_project, "vendor/jetty")

  web_inf_dir = File.join(@path_to_project, "WEB-INF")
  mkdir_p web_inf_dir
  FileUtils.mkdir_p(File.join(@path_to_project, "log"))
  @listener = if @settings.rails?
    "org.jruby.rack.rails.RailsServletContextListener"
  else
    "org.jruby.rack.RackServletContextListener"
  end
  overlay_files File.join(@jetpack_dir, "web_inf_files"), web_inf_dir

  if @settings.jetty_filters?
    web_inf_lib_dir = File.join(web_inf_dir, "lib")
    mkdir_p web_inf_lib_dir

    install_commons_validator web_inf_lib_dir

    web_inf_classes_dir = File.join(web_inf_dir, "classes")
    mkdir_p web_inf_classes_dir

    puts "Compiling Jetty filters"
    x! "javac -classpath #{vendor_dir}/jetty/lib/servlet-api-3.0.jar -d #{web_inf_classes_dir} #{@jetpack_dir}/src/java/jetpack/filter/IgnoreUnknownHttpMethodsFilter.java"
    x! "javac -classpath #{vendor_dir}/jetty/lib/servlet-api-3.0.jar:#{web_inf_lib_dir}/commons-validator-1.4.0.jar -d #{web_inf_classes_dir} #{@jetpack_dir}/src/java/jetpack/filter/ValidUrlFilter.java"
  end
end

config_jetpack_dir_in_project = File.join(@path_to_project, "config/jetpack_files")
if File.directory?(config_jetpack_dir_in_project)
  overlay_files config_jetpack_dir_in_project, @path_to_project
end

elapsed_seconds = (Time.now - script_start_time).to_i

puts %{Created:
  #{@created.uniq.sort.join("\n  ")}
Time: #{elapsed_seconds} s
}
